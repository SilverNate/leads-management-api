version: '3.8'

services:
  # Nginx web server
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_lead_api
    ports:
      - "80:80" # Map host port 80 to container port 80
    volumes:
      - ./:/var/www/html # Mount the current directory (Laravel app)
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf # Custom Nginx config
      - ./nginx.conf:/etc/nginx/nginx.conf # Main Nginx config (optional, if you want to override global settings)
    depends_on:
      - php-fpm # Nginx depends on PHP-FPM
    networks:
      - lead-network

  # PHP-FPM application server (Laravel)
  php-fpm:
    build:
      context: . # Build from current directory
      dockerfile: Dockerfile # Use the custom Dockerfile
    container_name: php_fpm_lead_api
    volumes:
      - ./:/var/www/html # Mount the current directory (Laravel app)
    # Ensure composer install and key generation are done after volume mount
    # and before the app starts serving requests. This can be done in the entrypoint
    # or manually after starting containers for the first time.
    environment:
      # Pass .env variables to the container for the Laravel application
      # Ensure these match the keys in your .env file
      APP_NAME: "${APP_NAME}"
      APP_ENV: "${APP_ENV}"
      APP_KEY: "${APP_KEY}"
      APP_DEBUG: "${APP_DEBUG}"
      APP_URL: "${APP_URL}"
      LOG_CHANNEL: "${LOG_CHANNEL}"
      LOG_DEPRECATIONS_CHANNEL: "${LOG_DEPRECATIONS_CHANNEL}"
      LOG_LEVEL: "${LOG_LEVEL}"
      DB_CONNECTION: "${DB_CONNECTION}"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_DATABASE: "${DB_DATABASE}"
      DB_USERNAME: "${DB_USERNAME}"
      DB_PASSWORD: "${DB_PASSWORD}"
      LOG_DB_HOST: "${LOG_DB_HOST}"
      LOG_DB_PORT: "${LOG_DB_PORT}"
      LOG_DB_DATABASE: "${LOG_DB_DATABASE}"
      LOG_DB_USERNAME: "${LOG_DB_USERNAME}"
      LOG_DB_PASSWORD: "${LOG_DB_PASSWORD}"
      REDIS_HOST: "${REDIS_HOST}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      REDIS_PORT: "${REDIS_PORT}"
      API_BEARER_TOKEN: "${API_BEARER_TOKEN}"
      THIRD_PARTY_API_URL: "${THIRD_PARTY_API_URL}"
      THIRD_PARTY_API_KEY: "${THIRD_PARTY_API_KEY}"
      APP_CORS_ALLOWED_ORIGINS: "${APP_CORS_ALLOWED_ORIGINS}"
    networks:
      - lead-network
    depends_on:
      - pgsql_leads_db
      - pgsql_error_logs_db
      - redis_cache

  # PostgreSQL database for leads
  pgsql_leads_db:
    image: postgres:15-alpine
    container_name: pgsql_leads_db
    environment:
      POSTGRES_DB: "${DB_DATABASE}"
      POSTGRES_USER: "${DB_USERNAME}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - db_leads_data:/var/lib/postgresql/data # Persistent data volume
      - ./init-leads-db.sql:/docker-entrypoint-initdb.d/init-leads-db.sql # Initialize with schema and data
    ports:
      - "5432:5432" # Expose for direct connection if needed (e.g., from host)
    networks:
      - lead-network

  # PostgreSQL database for error logs
  pgsql_error_logs_db:
    image: postgres:15-alpine
    container_name: pgsql_error_logs_db
    environment:
      POSTGRES_DB: "${LOG_DB_DATABASE}"
      POSTGRES_USER: "${LOG_DB_USERNAME}"
      POSTGRES_PASSWORD: "${LOG_DB_PASSWORD}"
    volumes:
      - db_error_logs_data:/var/lib/postgresql/data # Persistent data volume
      - ./init-error-logs-db.sql:/docker-entrypoint-initdb.d/init-error-logs-db.sql # Initialize with schema and data
    ports:
      - "5433:5432" 
    networks:
      - lead-network

  # Redis for caching
  redis_cache:
    image: redis:alpine
    container_name: redis_lead_api_cache
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data # Persistent data volume for Redis
    ports:
      - "6379:6379" # Expose for direct connection if needed
    networks:
      - lead-network

networks:
  lead-network:
    driver: bridge

volumes:
  db_leads_data: # Volume for leads database persistence
  db_error_logs_data: # Volume for error logs database persistence
  redis_data: # Volume for Redis data persistence